require(data.table)
require(cluster)
require(factoextra)
require(ggplot2)
require(TSdist)
require(TunePareto)
require(pROC)
require(glmnet)
set.seed(2)
MuskData<-as.data.table(read.csv('/Users/furkancetinkaya/Desktop/ie582/Musk1.csv', header = F))
setnames(MuskData,"V1","Bag class")
setnames(MuskData,"V2","Bag Id")
nrow(unique(MuskData[,1]))   ##2 classes
nrow(unique(MuskData[,2]))   ##92 bags
sum(is.na(MuskData))   ## no missing values
MuskScaled<-scale(MuskData[,-(1:2)])
MuskScaled<-cbind(MuskData[,1:2], MuskScaled)
# avg_sil <- function(k) {
#   km.res <- kmeans(df, centers = k, nstart = 25)
#   ss <- silhouette(km.res$cluster, dist(df))
#   mean(ss[, 3])
# }
#
#
# Result<-data.table()
# for(k in 2:10){
# km.res <- kmeans(MuskScaled[,-(1:2)], centers = k, nstart = 25)
# ssMan <- silhouette(km.res$cluster, dist(MuskScaled[,-(1:2)], method = "manhattan"))
# ssEuc <- silhouette(km.res$cluster, dist(MuskScaled[,-(1:2)], method = "euclidean"))
# meanMan<-mean(ssMan[, 3])
# meanEuc<-mean(ssEuc[, 3])
# result<-data.table(k=k, meanMan=meanMan, meanEuc=meanEuc)
# Result<-rbind(Result, result)
# }
#
#
#
# plot(Result$k, Result$meanEuc,type = "b",main="Euclidian",pch = 19, frame = FALSE,
#     xlab = "Number of clusters K",
#     ylab = "Average Silhouettes")   ## choose 3 clusters
#
#
# plot(Result$k, Result$meanMan,type = "b",main="Manhattan",pch = 19, frame = FALSE,
#      xlab = "Number of clusters K", ## choose 3 cluster
#      ylab = "Average Silhouettes")
#
fviz_nbclust(MuskScaled[,-(1:2)], FUN = hcut, method = "silhouette")    ##choose 3 clusters for hcust
fviz_nbclust(MuskScaled[,-(1:2)], FUN = pam, method = "silhouette")    ##choose 2 clusters for pam
pamEuc<-pam(MuskScaled[,-(1:2)], 2, diss=FALSE, metric = c("euclidean"))       ##pam with different distance measures
pamMan<-pam(MuskScaled[,-(1:2)], 2, diss=FALSE, metric = c("manhattan"))
fviz_cluster(pamEuc, data = MuskScaled[,-(1:2)], main = "Euclidian Cluster")    ##plots
fviz_cluster(pamMan, data = MuskScaled[,-(1:2)], main = "Manhattan Cluster")
hcEuc<-hclust(dist(MuskScaled[,-(1:2)], method = "euclidean"), method="ward.D2")
hcMan<-hclust(dist(MuskScaled[,-(1:2)], method = "manhattan"), method="ward.D2")
cutEuc <- cutree(hcEuc, k = 3)
cutMan <- cutree(hcMan, k = 3)
hcManCent<-apply (MuskScaled[,-c(1,2)], 2, function (x) tapply (x, cutEuc, mean))   ##hc centroid calculation
hcEucCent<-apply (MuskScaled[,-c(1,2)], 2, function (x) tapply (x, cutMan, mean))
# plot(hcEuc, cex = 0.6, main = "HC with euclidian")       ##plot of dendogram
# rect.hclust(hcEuc, k = 3, border = 2:5)
#
# plot(hcMan, cex = 0.6, main="HC with manhattan")
# rect.hclust(hcMan, k = 3, border = 2:5)
fviz_cluster(list(data = MuskScaled[,-(1:2)] , cluster = cutEuc), main = "HC with Euclidian")
fviz_cluster(list(data = MuskScaled[,-(1:2)] , cluster = cutMan), main = "HC with Manhattan")
#fviz_cluster(list(data =MuskScaled[,-(1:2)] , cluster = cutEuc), main = "Manhattan Cluster")  #plot of clusters
#fviz_cluster(list(data =MuskScaled[,-(1:2)] , cluster = cutMan), main="Euclidean Cluster")
#
# Clusters<-data.table()    ##bütün sonuçları yükle
# Clusters<-rbind(Clusters,pamEuc$clustering)
# setnames(Clusters[,1],old="x",new="pamEuc")
# Clusters[,pamManCluster:=pamMan$clustering]
# Clusters[,hcEucCluster:=cutEuc]
# Clusters[,hcManCluster:=cutMan]
# Clusters[,trueClass:=MuskData[,1]]
DistPamEuc=MuskScaled[,c(1,2)]
DistPamMan=MuskScaled[,c(1,2)]
DistHcEuc=MuskScaled[,c(1,2)]
DistHcMan=MuskScaled[,c(1,2)]
for( i in 1:3){
DistHcEuc=cbind(DistHcEuc,apply(MuskScaled[,-c(1,2)],1,function(x){sqrt(sum(x-hcEucCent[i,])^2)}))
DistHcMan=cbind(DistHcMan, apply(MuskScaled[,-c(1,2)],1,function(x){sum(abs(x-hcManCent[i,]))}))
}
for( i in 1:2){
DistPamEuc=cbind(DistPamEuc,apply(MuskScaled[,-c(1,2)],1,function(x){sqrt(sum(x-pamEuc$medoids[i,])^2)}))
DistPamMan=cbind(DistPamMan,apply(MuskScaled[,-c(1,2)],1,function(x){sum(abs(x-pamMan$medoids[i,]))}))
}
colnames(DistPamEuc)<-c("class","bag id","V1","V2")
colnames(DistPamMan)<-c("class","bag id","V1","V2")
colnames(DistHcEuc)<-c("class","bag id","V1","V2","V3")
colnames(DistHcMan)<-c("class","bag id","V1","V2","V3")
BagPamEuc<-data.table()
BagPamMan<-data.table()
BagHcEuc<-data.table()
BagHcMan<-data.table()
##mean distance for each bag
DistPamEuc[,mean1:=mean(V1),by="bag id"]
DistPamEuc[,mean2:=mean(V2),by="bag id"]
DistPamMan[,mean1:=mean(V1),by="bag id"]
DistPamMan[,mean2:=mean(V2),by="bag id"]
DistHcEuc[,mean1:=mean(V1),by="bag id"]
DistHcEuc[,mean2:=mean(V2),by="bag id"]
DistHcEuc[,mean3:=mean(V3),by="bag id"]
DistHcMan[,mean1:=mean(V1),by="bag id"]
DistHcMan[,mean2:=mean(V2),by="bag id"]
DistHcMan[,mean3:=mean(V3),by="bag id"]
BagRep1<-unique(DistPamEuc[,-c("V1","V2")])
BagRep2<-unique(DistPamMan[,-c("V1","V2")])
BagRep3<-unique(DistHcEuc[,-c("V1","V2","V3")])
BagRep4<-unique(DistHcMan[,-c("V1","V2","V3")])
meanAUC<-function(data){    ##function to calculate mean AUC
nofReplications=2
nFolds=10
alpha=1
nlambda=50
train_class=as.factor(data$class)
train = data[, -c(1:2)]
glmnet_alldata = glmnet(as.matrix(train), as.factor(train_class), family="binomial", alpha = alpha, nlambda=nlambda)
indices=generateCVRuns(train_class,nofReplications,nFolds,stratified=TRUE)
lambda_sequence = glmnet_alldata$lambda
cvresult=vector('list',nofReplications*nFolds)
iter=1
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
cvtrain=train[-testindices]
cvtrainclass=train_class[-testindices]
cvtest=train[testindices]
cvtestclass=train_class[testindices]
inner_cv_glmnet_fit = glmnet(as.matrix(cvtrain),as.factor(cvtrainclass),family="binomial", alpha = alpha,lambda=lambda_sequence)
valid_pred = t(as.matrix(predict(inner_cv_glmnet_fit, as.matrix(cvtest), s = lambda_sequence, type = "class")))
foldresult=rbindlist(lapply(c(1:length(lambda_sequence)),function(x) { data.table(repl=i,fold=j,lambda=lambda_sequence[x],bag_class=cvtestclass,pred=valid_pred[x,], AUC=pROC::auc(roc(cvtestclass, as.numeric(valid_pred[x,]))))}))
cvresult[[iter]]=foldresult
iter=iter+1
}
}
cvresult=rbindlist(cvresult)
cvresultfinal=unique(cvresult[,list(repl,fold,lambda, AUC)])
cvresultfinal[,meanAUC:=mean(AUC), by=list(lambda)]
meanAUC<-max(cvresultfinal$meanAUC)
return(meanAUC)
}
meanAUC(BagRep1)
meanAUC(BagRep2)
meanAUC(BagRep3)
meanAUC(BagRep4)
